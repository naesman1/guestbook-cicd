name: üöÄ CI/CD - Python Guestbook

# Eventos que disparan el pipeline
on:
  push:
    branches:
      - main     # Despliegue de Producci√≥n (CD)
      - develop  # Integraci√≥n Continua (CI)
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Permite ejecutar el pipeline manualmente

env:
  DOCKER_IMAGE_NAME: guestbook-frontend

jobs:
  # -------------------------------------------------------------------------
  # JOB 1: INTEGRACI√ìN CONTINUA (CI) - Se ejecuta en main, develop y Pull Requests
  # -------------------------------------------------------------------------
  ci:
    name: üß™ Continuous Integration Checks
    runs-on: ubuntu-latest

    services:
      # Configura un servicio Redis temporal para las pruebas de CI
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: ‚¨áÔ∏è Checkout Code (Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para SonarCloud SCM y Git info

      - name: üêç Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: üì¶ Install dependencies
        run: pip install -r requirements.txt
        
      - name: üîé Run Linting (Flake8)
        run: |
          pip install flake8
          flake8 app tests

      # üß™ 1. Ejecutar Tests y generar el informe de cobertura
      - name: üß™ Run Tests with Coverage
        # Usa el nombre del servicio Redis configurado arriba
        env:
          REDIS_HOST: localhost 
        run: |
          pip install pytest coverage
          # Usa el puerto mapeado (6379)
          coverage run --source=app -m pytest tests/
          coverage xml -o coverage-report.xml

      # üõ°Ô∏è 2. An√°lisis de Vulnerabilidades (Snyk)
      - name: üõ°Ô∏è Run Snyk Security Scan
        uses: snyk/actions/python-3.11@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=requirements.txt

      # üìä 3. An√°lisis Est√°tico de C√≥digo (SonarCloud)
      - name: üìä SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=naesman1
            -Dsonar.projectKey=naesman1_guestbook-cicd
            -Dsonar.sources=app/
            -Dsonar.tests=tests/
            -Dsonar.python.coverage.reportPaths=coverage-report.xml
            -Dsonar.scm.disabled=true # Soluciona el error de rama en el scanner

  # -------------------------------------------------------------------------
  # JOB 2: DESPLIEGUE CONTINUO (CD) - SOLO se ejecuta si la rama es MAIN
  # -------------------------------------------------------------------------
  deploy:
    name: üöÄ Continuous Deployment (MAIN Branch Only)
    needs: ci
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout Application Code
        uses: actions/checkout@v4
        
      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # üèóÔ∏è Build y Push con doble tag: SHA + latest
      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      # ‚öôÔ∏è GitOps: Actualiza el Repositorio de Configuraci√≥n
      - name: ‚¨áÔ∏è Checkout Kubernetes Config Repo
        uses: actions/checkout@v4
        with:
          repository: naesman1/guestbook-k8s-config
          token: ${{ secrets.GH_TOKEN }} 
          path: config-repo

      # üè∑Ô∏è Actualiza el tag de imagen en el manifiesto autom√°ticamente
      - name: üè∑Ô∏è Update Kubernetes Manifest Tag (Auto SED)
        run: |
          cd config-repo
          FILE="k8s/frontend-deployment.yaml"
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"
          NEW_TAG="${{ github.sha }}"

          # Reemplaza cualquier tag existente en la l√≠nea de la imagen
          sed -i -E "s|(${IMAGE_NAME}):[a-zA-Z0-9._-]+|\1:${NEW_TAG}|g" $FILE

      # ‚¨ÜÔ∏è Commit y push al repo de configuraci√≥n (dispara ArgoCD)
      - name: ‚¨ÜÔ∏è Commit and Push to GitOps Repo (Trigger ArgoCD)
        run: |
          cd config-repo
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add k8s/frontend-deployment.yaml
          git commit --allow-empty -m "chore(cd): update image tag to ${{ github.sha }}"
          git push
