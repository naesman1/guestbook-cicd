name: üöÄ CI/CD - Python Guestbook

# Eventos que disparan el pipeline
on:
  push:
    branches:
      - main     # La rama de producci√≥n
      - develop  # La rama de integraci√≥n
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch: # Permite ejecutar el pipeline manualmente

jobs:
  # -------------------------------------------------------------------------
  # JOB 1: INTEGRACI√ìN CONTINUA (CI) - Se ejecuta en todas las ramas
  # -------------------------------------------------------------------------
  ci:
    runs-on: ubuntu-latest

    services:
      # Nombre que usaremos para referenciar el servicio dentro del Job
      redis:
        # Usamos la imagen oficial de Docker Hub
        image: redis:7-alpine
        # Mapeamos el puerto est√°ndar de Redis al host del Runner
        ports:
          - 6379:6379
        # Necesario para que el host sea accesible por el nombre "localhost"
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para SonarCloud para analizar todo el historial

      - name: üêç Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip' # Cach√© de dependencias para acelerar el proceso

      - name: üì¶ Install dependencies
        run: pip install -r requirements.txt
        
      - name: üîé Run Linting (Flake8)
        run: |
          pip install flake8
          flake8 app tests

      # üß™ 1. Ejecutar Tests y generar el informe de cobertura (Requisito 3)
      - name: üß™ Run Tests with Coverage
        run: |
          pip install pytest coverage
          coverage run -m pytest tests/
          coverage xml -o coverage-report.xml

      # üõ°Ô∏è 2. An√°lisis de Vulnerabilidades (Snyk - Requisito 6)
      - name: üõ°Ô∏è Run Snyk Security Scan
        uses: snyk/actions/python-3.11@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Usa el secret que configuraste
        with:
          command: test
          args: --file=requirements.txt

      # üìä 3. An√°lisis Est√°tico de C√≥digo (SonarCloud - Requisito 5)
      - name: üìä SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token por defecto de GitHub (lo genera Actions)
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Usa el secret que configuraste
        with:
          args: >
            -naesman1 #oganizacion
            -Dsonar.projectKey=guestbook-cicd 
            -Dsonar.sources=app/ 
            -Dsonar.tests=tests/ 
            -Dsonar.coverage.jacoco.xmlReportPaths=coverage-report.xml

  # -------------------------------------------------------------------------
  # JOB 2: DESPLIEGUE CONTINUO (CD) - SOLO se ejecuta si la rama es MAIN/MASTER
  # -------------------------------------------------------------------------
  deploy:
    needs: ci # Asegura que el job de CI se haya completado exitosamente
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Code (App Repo)
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # üê≥ 4. Publicar Artefacto (Imagen Docker - Requisito 7 y 8)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Etiquetamos la imagen con el SHA del commit (inmutabilidad)
          tags: ${{ secrets.DOCKER_USERNAME }}/guestbook-frontend:${{ github.sha }}

      # ‚öôÔ∏è 5. Despliegue GitOps (Actualiza el Repo de Configuraci√≥n - Requisito 9)
      - name: Checkout Kubernetes Config Repo
        uses: actions/checkout@v4
        with:
          repository: naesman1/guestbook-k8s-config
          token: ${{ secrets.GH_TOKEN }} # El token con permisos de escritura
          path: config-repo

      - name: Update Kubernetes Manifest (Deployment Tag)
        run: |
          cd config-repo
          # Instala yq para manipular YAML
          sudo apt-get update && sudo apt-get install -y yq
          
          # Actualiza el tag de la imagen en el Deployment YAML
          yq e '.spec.template.spec.containers[0].image = "${{ secrets.DOCKER_USERNAME }}/guestbook-frontend:${{ github.sha }}"' -i k8s/frontend-deployment.yaml

      - name: Commit and Push to GitOps Repo (Trigger ArgoCD)
        run: |
          cd config-repo
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add k8s/frontend-deployment.yaml
          git commit -m "chore(cd): Update frontend image tag to ${{ github.sha }}" || echo "No changes to commit"
          git push
